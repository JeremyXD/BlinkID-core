/**
 * @file BlinkInputResult.h
 *
 * Copyright (c)2017 Microblink Ltd. All rights reserved.
 *
 * ANY UNAUTHORIZED USE OR SALE, DUPLICATION, OR DISTRIBUTION
 * OF THIS PROGRAM OR ANY OF ITS PARTS, IN SOURCE OR BINARY FORMS,
 * WITH OR WITHOUT MODIFICATION, WITH THE PURPOSE OF ACQUIRING
 * UNLAWFUL MATERIAL OR ANY OTHER BENEFIT IS PROHIBITED!
 * THIS PROGRAM IS PROTECTED BY COPYRIGHT LAWS AND YOU MAY NOT
 * REVERSE ENGINEER, DECOMPILE, OR DISASSEMBLE IT.
 */

#ifndef BLINK_INPUT_RESULT_INCLUDED
#define BLINK_INPUT_RESULT_INCLUDED

#include "Recognizer/Export.h"
#include "Recognizer/RecognizerError.h"
#include "Recognizer/RecognizerResultFwd.h"
#include "Recognizer/Templating/TemplatingResult.h"

#ifdef __cplusplus
extern "C" {
#endif

/**
* @memberof RecognizerResult
* @brief Returns non-zero value if given result is generated by BlinkInput recognizer.
* @param result RecognizerResult object
* @return non-zero value if result is generated by BlinkInput recognizer, zero if not
*/
MB_API int MB_CALL recognizerResultIsBlinkInputResult( const RecognizerResult* result );

/**
 * @struct BlinkInputResult
 * @brief Result for storing BlinkInput recognition data.
 */
struct BlinkInputResult {
    /**
     * Pointer to TemplatingResult structure containing parser results and OCR layout.
     */
    const TemplatingResult* templatingResult;
};

/**
 * @brief Typedef for BlinkInputResult structure
 */
typedef MB_EXPORTED_TYPE struct BlinkInputResult BlinkInputResult;

/**
* @memberof RecognizerResult
* @brief Obtains the scanned data from BlinkInput recognizers.
* You can use the obtained pointers inside BlinkInputResult structure until recognizerResultDelete is called on the RecognizerResult object.
* Example:
* @code
BlinkInputResult blinkInputResult;
RecognizerErrorStatus status = recognizerResultGetBlinkInputResult(result, &blinkInputResult);

if (status == RECOGNIZER_ERROR_STATUS_SUCCESS) {
    // use data from blinkInputResult
    // for example, obtain string returned by "myParser"
    const char* myParserResult = NULL;
    templatingResultGetParsedStringFromDefaultParserGroup( blinkInputResult.templatingResult, "myParser", &myParserResult );
    if( myParserResult != NULL ) {
        printf( "My parser returned: %s\n", myParserResult );
    }

    // all pointers are valid until recognizerResultDelete is called with 'result' as parameter
    // this includes pointers returned by templatingResultGet* functions defined in TemplatingResult.h
} else {
    const char* statusString = recognizerErrorToString(status);
    printf("Error status: %s\n", statusString);

    // handle error
}
* @endcode
*
* @param result RecognizerResult object which stores the values of the results
* @param blinkInputResult Pointer to BlinkInputResult structure which will be filled with scanned data.
* @return status of the operation
*/
MB_API RecognizerErrorStatus MB_CALL recognizerResultGetBlinkInputResult(const RecognizerResult* result, BlinkInputResult* blinkInputResult);

#ifdef __cplusplus
}
#endif

#endif
