/**
 * @file RecognizerResult.h
 *
 *  Created on: Oct 9, 2013
 *      Authors: mkorpar, dodo
 */

#ifndef RECOGNIZERRESULT_H_
#define RECOGNIZERRESULT_H_

#include <stdlib.h>

#include "RecognizerError.h"
#include "Export.h"

#ifdef __cplusplus
extern "C" {
#endif

/**
 @struct RecognizerResult
 @brief RecognizerResult data structure. Holds the results of the recognition.
 
 You can use various getter methods to obtain results of the recognition or to inspect the type of recognizer result.
 */
typedef PP_EXPORTED_TYPE struct RecognizerResult RecognizerResult;

/**
 * @memberof RecognizerResult
 * @brief Obtain whether given recognizer result is empty.
 * Example:
 * @code
 *      RecognizerResult *result;
 *      int empty;
 *      RecognizerErrorStatus status = recognizerResultIsResultEmpty(recognizer, &empty);
 *      if(empty) {
 *          // handle empty data
 *      } else {
 *          // handle non-empty data
 *      }
 * @endcode
 *
 * @param   result          RecognizerResult object which stores the values of the results.
 * @param   empty           Pointer to an integer where result of operation will be stored.
 * @return  errorStatus     Status of the operation: RECOGNIZER_ERROR_STATUS_SUCCESS if everything is OK,
 *                              RECOGNIZER_ERROR_STATUS_POINTER_IS_NULL if NULL is given as parameter
 *
 */
PP_API RecognizerErrorStatus PP_CALL recognizerResultIsResultEmpty(const RecognizerResult* result, int* empty);

/**
* @memberof RecognizerResult
* @brief Obtain whether given recognizer result is valid.
* Example:
* @code
*      RecognizerResult *result;
*      int valid;
*      RecognizerErrorStatus status = recognizerResultIsResultValid(recognizer, &valid);
*      if(valid) {
*          // handle valid data
*      } else {
*          // handle invalid data
*      }
* @endcode
*
* @param result RecognizerResult object which stores the values of the results.
* @param valid Pointer to an integer where result of operation will be stored.
* @return status of the operation: RECOGNIZER_ERROR_STATUS_SUCCESS if everything is OK, RECOGNIZER_ERROR_STATUS_POINTER_IS_NULL if NULL is given as parameter
*
*/
PP_API RecognizerErrorStatus PP_CALL recognizerResultIsResultValid(const RecognizerResult* result, int* valid);


/**
* @memberof RecognizerResult
* @brief Returns non-zero value if given result is generated by Machine Readable Travel Document recognizer.
* @param result RecognizerResult object
* @param isMrtd pointer to store result of the operation: non-zero if given object is generated by MRTD recognizer, zero otherwise.
* @return status of the operation: RECOGNIZER_ERROR_STATUS_POINTER_IS_NULL if NULL is given as parameter, RECOGNIZER_ERROR_STATUS_SUCCESS otherwise
*/
PP_API RecognizerErrorStatus PP_CALL recognizerResultIsMRTDResult(const RecognizerResult* result, int* isMrtd);

/**
* @memberof RecognizerResult
* @brief Returns the document code string from MRTD result.
* You can use the obtained string until recognizerResultDelete is called on the RecognizerResult object.
* If you want to use the string later, you must copy it.
* String is guaranteed to be zero-terminated.
* @param result RecognizerResult object which stores the values of the results
* @param documentCode Pointer to char pointer that will be set to document code string.
* @return status of the operation: RECOGNIZER_ERROR_STATUS_SUCCESS if everything is OK, RECOGNIZER_ERROR_STATUS_POINTER_IS_NULL if NULL is given as parameter,
*         RECOGNIZER_ERROR_STATUS_INVALID_TYPE if result is not a MRTD result.
*/
PP_API RecognizerErrorStatus PP_CALL recognizerResultGetMRTDDocumentCode(const RecognizerResult* result, const char** documentCode);

/**
* @memberof RecognizerResult
* @brief Returns the issuer string from MRTD result.
* You can use the obtained string until recognizerResultDelete is called on the RecognizerResult object.
* If you want to use the string later, you must copy it.
* String is guaranteed to be zero-terminated.
* @param result RecognizerResult object which stores the values of the results
* @param issuer Pointer to char pointer that will be set to issuer string.
* @return status of the operation: RECOGNIZER_ERROR_STATUS_SUCCESS if everything is OK, RECOGNIZER_ERROR_STATUS_POINTER_IS_NULL if NULL is given as parameter,
*         RECOGNIZER_ERROR_STATUS_INVALID_TYPE if result is not a MRTD result.
*/
PP_API RecognizerErrorStatus PP_CALL recognizerResultGetMRTDIssuer(const RecognizerResult* result, const char** issuer);

/**
* @memberof RecognizerResult
* @brief Returns the document number string from MRTD result.
* You can use the obtained string until recognizerResultDelete is called on the RecognizerResult object.
* If you want to use the string later, you must copy it.
* String is guaranteed to be zero-terminated.
* @param result RecognizerResult object which stores the values of the results
* @param documentNumber Pointer to char pointer that will be set to document number string.
* @return status of the operation: RECOGNIZER_ERROR_STATUS_SUCCESS if everything is OK, RECOGNIZER_ERROR_STATUS_POINTER_IS_NULL if NULL is given as parameter,
*         RECOGNIZER_ERROR_STATUS_INVALID_TYPE if result is not a MRTD result.
*/
PP_API RecognizerErrorStatus PP_CALL recognizerResultGetMRTDDocumentNumber(const RecognizerResult* result, const char** documentNumber);

/**
* @memberof RecognizerResult
* @brief Returns the opt1 string from MRTD result.
* You can use the obtained string until recognizerResultDelete is called on the RecognizerResult object.
* If you want to use the string later, you must copy it.
* String is guaranteed to be zero-terminated.
* @param result RecognizerResult object which stores the values of the results
* @param opt1 Pointer to char pointer that will be set to opt1 string.
* @return status of the operation: RECOGNIZER_ERROR_STATUS_SUCCESS if everything is OK, RECOGNIZER_ERROR_STATUS_POINTER_IS_NULL if NULL is given as parameter,
*         RECOGNIZER_ERROR_STATUS_INVALID_TYPE if result is not a MRTD result.
*/
PP_API RecognizerErrorStatus PP_CALL recognizerResultGetMRTDOpt1(const RecognizerResult* result, const char** opt1);

/**
* @memberof RecognizerResult
* @brief Returns the date of birth string from MRTD result.
* You can use the obtained string until recognizerResultDelete is called on the RecognizerResult object.
* If you want to use the string later, you must copy it.
* String is guaranteed to be zero-terminated.
* @param result RecognizerResult object which stores the values of the results
* @param dateOfBirth Pointer to char pointer that will be set to date of birth string.
* @return status of the operation: RECOGNIZER_ERROR_STATUS_SUCCESS if everything is OK, RECOGNIZER_ERROR_STATUS_POINTER_IS_NULL if NULL is given as parameter,
*         RECOGNIZER_ERROR_STATUS_INVALID_TYPE if result is not a MRTD result.
*/
PP_API RecognizerErrorStatus PP_CALL recognizerResultGetMRTDDateOfBirth(const RecognizerResult* result, const char** dateOfBirth);

/**
* @memberof RecognizerResult
* @brief Returns the sex string from MRTD result.
* You can use the obtained string until recognizerResultDelete is called on the RecognizerResult object.
* If you want to use the string later, you must copy it.
* String is guaranteed to be zero-terminated.
* @param result RecognizerResult object which stores the values of the results
* @param sex Pointer to char pointer that will be set to sex string.
* @return status of the operation: RECOGNIZER_ERROR_STATUS_SUCCESS if everything is OK, RECOGNIZER_ERROR_STATUS_POINTER_IS_NULL if NULL is given as parameter,
*         RECOGNIZER_ERROR_STATUS_INVALID_TYPE if result is not a MRTD result.
*/
PP_API RecognizerErrorStatus PP_CALL recognizerResultGetMRTDSex(const RecognizerResult* result, const char** sex);

/**
* @memberof RecognizerResult
* @brief Returns the date of expiry string from MRTD result.
* You can use the obtained string until recognizerResultDelete is called on the RecognizerResult object.
* If you want to use the string later, you must copy it.
* String is guaranteed to be zero-terminated.
* @param result RecognizerResult object which stores the values of the results
* @param dateOfExpiry Pointer to char pointer that will be set to date of expiry string.
* @return status of the operation: RECOGNIZER_ERROR_STATUS_SUCCESS if everything is OK, RECOGNIZER_ERROR_STATUS_POINTER_IS_NULL if NULL is given as parameter,
*         RECOGNIZER_ERROR_STATUS_INVALID_TYPE if result is not a MRTD result.
*/
PP_API RecognizerErrorStatus PP_CALL recognizerResultGetMRTDDateOfExpiry(const RecognizerResult* result, const char** dateOfExpiry);

/**
* @memberof RecognizerResult
* @brief Returns the nationality string from MRTD result.
* You can use the obtained string until recognizerResultDelete is called on the RecognizerResult object.
* If you want to use the string later, you must copy it.
* String is guaranteed to be zero-terminated.
* @param result RecognizerResult object which stores the values of the results
* @param nationality Pointer to char pointer that will be set to nationality string.
* @return status of the operation: RECOGNIZER_ERROR_STATUS_SUCCESS if everything is OK, RECOGNIZER_ERROR_STATUS_POINTER_IS_NULL if NULL is given as parameter,
*         RECOGNIZER_ERROR_STATUS_INVALID_TYPE if result is not a MRTD result.
*/
PP_API RecognizerErrorStatus PP_CALL recognizerResultGetMRTDNationality(const RecognizerResult* result, const char** nationality);

/**
* @memberof RecognizerResult
* @brief Returns the opt2 string from MRTD result.
* You can use the obtained string until recognizerResultDelete is called on the RecognizerResult object.
* If you want to use the string later, you must copy it.
* String is guaranteed to be zero-terminated.
* @param result RecognizerResult object which stores the values of the results
* @param opt2 Pointer to char pointer that will be set to opt2 string.
* @return status of the operation: RECOGNIZER_ERROR_STATUS_SUCCESS if everything is OK, RECOGNIZER_ERROR_STATUS_POINTER_IS_NULL if NULL is given as parameter,
*         RECOGNIZER_ERROR_STATUS_INVALID_TYPE if result is not a MRTD result.
*/
PP_API RecognizerErrorStatus PP_CALL recognizerResultGetMRTDOpt2(const RecognizerResult* result, const char** opt2);

/**
* @memberof RecognizerResult
* @brief Returns the primary ID string from MRTD result.
* You can use the obtained string until recognizerResultDelete is called on the RecognizerResult object.
* If you want to use the string later, you must copy it.
* String is guaranteed to be zero-terminated.
* @param result RecognizerResult object which stores the values of the results
* @param primaryID Pointer to char pointer that will be set to primary ID string.
* @return status of the operation: RECOGNIZER_ERROR_STATUS_SUCCESS if everything is OK, RECOGNIZER_ERROR_STATUS_POINTER_IS_NULL if NULL is given as parameter,
*         RECOGNIZER_ERROR_STATUS_INVALID_TYPE if result is not a MRTD result.
*/
PP_API RecognizerErrorStatus PP_CALL recognizerResultGetMRTDPrimaryID(const RecognizerResult* result, const char** primaryID);

/**
* @memberof RecognizerResult
* @brief Returns the secondary ID string from MRTD result.
* You can use the obtained string until recognizerResultDelete is called on the RecognizerResult object.
* If you want to use the string later, you must copy it.
* String is guaranteed to be zero-terminated.
* @param result RecognizerResult object which stores the values of the results
* @param secondaryID Pointer to char pointer that will be set to secondary ID string.
* @return status of the operation: RECOGNIZER_ERROR_STATUS_SUCCESS if everything is OK, RECOGNIZER_ERROR_STATUS_POINTER_IS_NULL if NULL is given as parameter,
*         RECOGNIZER_ERROR_STATUS_INVALID_TYPE if result is not a MRTD result.
*/
PP_API RecognizerErrorStatus PP_CALL recognizerResultGetMRTDSecondaryID(const RecognizerResult* result, const char** secondaryID);

/**
* @memberof RecognizerResult
* @brief Obtains the raw string representation of data from Machine Readable Travel Document.
* You can use the obtained string until recognizerResultDelete is called on the RecognizerResult object.
* If you want to use the string later, you must copy it.
* String is guaranteed to be zero-terminated.
* Example:
* @code
const char* res;
RecognizerErrorStatus status = recognizerResultGetMRTDRawStringData(result, &res);

if (status == RECOGNIZER_ERROR_STATUS_SUCCESS) {
// use the value res
} else {
const char* statusString = recognizerErrorToString(status);
printf("Error status: %s\n", statusString);

// handle error
}
* @endcode
*
* @param result RecognizerResult object which stores the values of the results
* @param dst Pointer to char pointer that will be set to internal array holding the string data.
* @return status of the operation: RECOGNIZER_ERROR_STATUS_SUCCESS if everything is OK, RECOGNIZER_ERROR_STATUS_POINTER_IS_NULL if NULL is given as parameter,
*         RECOGNIZER_ERROR_STATUS_INVALID_TYPE if result is not generated by MRTD recognizer.
*/
PP_API RecognizerErrorStatus PP_CALL recognizerResultGetMRTDRawStringData(const RecognizerResult* result, const char** dst);














#ifdef __cplusplus
}
#endif

#endif
